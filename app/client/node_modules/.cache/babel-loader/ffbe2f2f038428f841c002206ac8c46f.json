{"ast":null,"code":"import Axios from 'axios';\nlet base = 'http://localhost:8000';\nAxios.interceptors.request.use(config => {\n  config.headers.Authorization = `Bearer ${localStorage.access}`;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nAxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n  let refreshToken = localStorage.refresh;\n\n  if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return Axios.post(`${base}/api/token/refresh/`, {\n      refresh: refreshToken\n    }).then(res => {\n      if (res.status === 200) {\n        localStorage.setItem(\"access\", res.data.access);\n        localStorage.setItem(\"refresh\", res.data.refresh);\n        return Axios(originalRequest);\n      }\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default Axios;","map":{"version":3,"sources":["/Users/numan/dev/GitHub_Repos/tygr-sports-int/app/client/src/utils/Axios.js"],"names":["Axios","base","interceptors","request","use","config","headers","Authorization","localStorage","access","error","Promise","reject","response","originalRequest","refreshToken","refresh","status","_retry","post","then","res","setItem","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,IAAI,GAAG,uBAAX;AAEAD,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAI;AACNA,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAAgC,UAASC,YAAY,CAACC,MAAO,EAA7D;AACF,SAAOJ,MAAP;AACD,CAJL,EAKIK,KAAK,IAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPL;AAUAV,KAAK,CAACE,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACKS,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHL,EAII,UAAUH,KAAV,EAAiB;AACf,QAAMI,eAAe,GAAGJ,KAAK,CAACL,MAA9B;AACA,MAAIU,YAAY,GAAGP,YAAY,CAACQ,OAAhC;;AAEA,MAAID,YAAY,IAAIL,KAAK,CAACG,QAAN,CAAeI,MAAf,KAA0B,GAA1C,IAAiD,CAACH,eAAe,CAACI,MAAtE,EAA8E;AAC5EJ,IAAAA,eAAe,CAACI,MAAhB,GAAyB,IAAzB;AACA,WAAOlB,KAAK,CACPmB,IADE,CACI,GAAElB,IAAK,qBADX,EACiC;AAAEe,MAAAA,OAAO,EAAGD;AAAZ,KADjC,EAEFK,IAFE,CAEIC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;AAEpBT,QAAAA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BD,GAAG,CAACE,IAAJ,CAASd,MAAxC;AACAD,QAAAA,YAAY,CAACc,OAAb,CAAqB,SAArB,EAAgCD,GAAG,CAACE,IAAJ,CAASP,OAAzC;AAEF,eAAOhB,KAAK,CAACc,eAAD,CAAZ;AACD;AACF,KAVE,CAAP;AAWD;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAvBL;AA0BA,eAAeV,KAAf","sourcesContent":["import Axios from 'axios';\n\nlet base = 'http://localhost:8000';\n\nAxios.interceptors.request.use(\n    config => {\n        config.headers.Authorization = `Bearer ${localStorage.access}`\n      return config;\n    },\n    error => {\n      return Promise.reject(error);\n    }\n);\n\nAxios.interceptors.response.use(\n    (response) => {\n      return response;\n    },\n    function (error) {\n      const originalRequest = error.config;\n      let refreshToken = localStorage.refresh\n    \n      if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        return Axios\n            .post(`${base}/api/token/refresh/`, { refresh : refreshToken})\n            .then((res) => {\n              if (res.status === 200) {\n            \n                  localStorage.setItem(\"access\", res.data.access)\n                  localStorage.setItem(\"refresh\", res.data.refresh)\n\n                return Axios(originalRequest);\n              }\n            });\n      }\n      return Promise.reject(error);\n    }\n);\n\nexport default Axios;"]},"metadata":{},"sourceType":"module"}